public class LongestPeak {
    public static int longestPeak(int[] array) {
        int longestPeakLength = 0;
        int i = 1;

        while (i < array.length - 1) {
            boolean isPeak = array[i - 1] < array[i] && array[i] > array[i + 1];

            if (!isPeak) {
                // If the current element is not a peak, move to the next element.
                i++;
                continue;
            }

            // If a peak is found, expand to the left to find the left boundary of the peak.
            int leftIndex = i - 2;
            while (leftIndex >= 0 && array[leftIndex] < array[leftIndex + 1]) {
                leftIndex--;
            }

            // Expand to the right to find the right boundary of the peak.
            int rightIndex = i + 2;
            while (rightIndex < array.length && array[rightIndex] < array[rightIndex - 1]) {
                rightIndex++;
            }

            // Calculate the current peak length and update the longest peak length if necessary.
            int currentPeakLength = rightIndex - leftIndex - 1;
            longestPeakLength = Math.max(longestPeakLength, currentPeakLength);

            // Move the pointer to the right of the current peak to search for the next peak.
            i = rightIndex;
        }

        return longestPeakLength;
    }

    public static void main(String[] args) {
        int[] array = {1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3};
        int longestPeakLength = longestPeak(array);
        System.out.println("Longest peak length: " + longestPeakLength);
    }
}
